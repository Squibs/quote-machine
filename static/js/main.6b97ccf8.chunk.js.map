{"version":3,"sources":["app/state/ducks/quotes/types.ts","app/views/components/Footer.tsx","app/state/ducks/quotes/reducers.ts","app/state/utils/axiosApiRequest.ts","app/state/ducks/quotes/operations.ts","app/state/ducks/quotes/actions.ts","app/state/ducks/quotes/index.ts","app/views/containers/QuoteControls.tsx","app/views/containers/QuoteDisplay.tsx","app/views/pages/QuoteMachine.tsx","app/views/App.tsx","app/state/store.ts","index.tsx"],"names":["QuotesActions","StyledFooter","styled","footer","props","theme","secondary","twitterBlue","Footer","href","target","rel","initialState","author","quote","reducer","combineReducers","quotes","state","action","type","FETCH_QUOTE","payload","CLEAR_QUOTE","axiosApiRequest","axios","create","baseURL","fetchQuote","dispatch","a","get","Date","getTime","response","formattedData","data","title","rendered","content","quoteInformation","clearQuote","mapDispatchToProps","quotesOperations","connector","connect","QuoteControlContainer","header","GetQuoteButton","button","accent","TwitterLink","onClick","tweetLink","url","generateButton","icon","faTwitter","size","alert","div","document","createElement","innerHTML","cleanedQuote","textContent","innerText","trim","cleanedAuthor","generateTweetURL","QuoteDisplayContainer","main","QuoteTextDiv","QuoteAuthorI","useEffect","dangerouslySetInnerHTML","__html","faCircleNotch","spin","QuoteMachine","QuoteControls","primary","fontFamily","GlobalStyle","createGlobalStyle","App","rootReducer","reducers","composeEnhancers","composeWithDevTools","configureStore","createStore","applyMiddleware","reduxThunk","reduxStore","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"6RASYA,E,8DCJNC,EAAeC,IAAOC,OAAV,2EAAGD,CAAH,wGAEP,SAACE,GAAD,OAAWA,EAAMC,MAAMC,aAMrB,SAACF,GAAD,OAAWA,EAAMC,MAAME,eAerBC,EATU,kBACvB,eAACP,EAAD,yCAEE,mBAAGQ,KAAK,4BAA4BC,OAAO,SAASC,IAAI,aAAxD,gC,wCDbQX,K,iCAAAA,E,kCAAAA,M,KENZ,I,EAAMY,EAA4B,CAChCC,OAAQ,GACRC,MAAO,IAkBMC,EAJCC,0BAAgB,CAC9BC,OAZoB,WAAsD,IAArDC,EAAoD,uDAA5CN,EAAcO,EAA8B,uCACzE,OAAQA,EAAOC,MACb,KAAKpB,EAAcqB,YACjB,OAAO,2BAAKH,GAAZ,IAAmBL,OAAQM,EAAOG,QAAQT,OAAQC,MAAOK,EAAOG,QAAQR,QAC1E,KAAKd,EAAcuB,YACjB,OAAO,2BAAKL,GAAZ,IAAmBL,OAAQ,GAAIC,MAAO,KACxC,QACE,OAAOI,M,iCCTEM,E,OAJSC,EAAMC,OAAO,CACnCC,QAAS,6CCGLC,EAAa,yDAAgB,WAAOC,GAAP,iBAAAC,EAAA,sEACVN,EAAgBO,IAAhB,qDACwB,IAAIC,MAAOC,YAFzB,OAC3BC,EAD2B,OAK3BC,EAAgB,CACpBtB,OAAQqB,EAASE,KAAK,GAAGC,MAAMC,SAC/BxB,MAAOoB,EAASE,KAAK,GAAGG,QAAQD,UAGlCT,GCdkBW,EDcUL,ECd4C,CACxEf,KAAMpB,EAAcqB,YACpBC,QAASkB,KDEwB,iCCJhB,IAACA,IDIe,OAAhB,uDAeXC,ECdW,iBAA0B,CAC3CrB,KAAMpB,EAAcuB,cCFPR,ICQT2B,EAAqB,CACzBd,WAAYe,EAAiBf,WAC7Ba,WAAYE,EAAiBF,YAGzBG,EAAYC,aATM,SAAC3B,GAAD,MAAsB,CAC5CJ,MAAOI,EAAMD,OAAOA,UAQqByB,GAUrCI,EAAwB5C,IAAO6C,OAAV,2FAAG7C,CAAH,qFAIL,SAACE,GAAD,OAAWA,EAAMC,MAAMC,aAIvC0C,EAAiB9C,IAAO+C,OAAV,oFAAG/C,CAAH,wMAKE,SAACE,GAAD,OAAWA,EAAMC,MAAMC,aACvB,SAACF,GAAD,OAAWA,EAAMC,MAAM6C,UAElC,SAAC9C,GAAD,OAAWA,EAAMC,MAAM6C,UAO5BC,EAAcjD,IAAO4B,EAAV,iFAAG5B,CAAH,gNAIN,SAACE,GAAD,OAAWA,EAAMC,MAAME,eAChB,SAACH,GAAD,OAAWA,EAAMC,MAAMC,aAK3B,SAACF,GAAD,OAAWA,EAAMC,MAAM6C,UAwEtBN,KA3DyB,SAAC,GAA8C,IAA5ChB,EAA2C,EAA3CA,WAAYa,EAA+B,EAA/BA,WAAY3B,EAAmB,EAAnBA,MAmDjE,OACE,eAACgC,EAAD,WACE,cAACE,EAAD,CAAgBI,QApDG,WACrBX,IACAb,KAkDE,mBA/CqB,WACvB,IAAMyB,EAAY,SAACC,GAWjB,IAAMC,EAAiB,SAACnD,GAAD,OAErB,aADA,CACC+C,EAAD,2BAAiB/C,GAAjB,aACE,cAAC,IAAD,CAAiBoD,KAAMC,IAAWC,KAAK,WAK3C,OAMOH,EANFD,EAMiB,CAAE5C,OAAQ,SAAUD,KAAM6C,EAAK3C,IAAK,cAJlC,CAAEyC,QAAS,kBAAMO,MAAM,8BAOjD,GAAoB,KAAhB7C,EAAMA,OAAiC,KAAjBA,EAAMD,OAAe,CAC7C,IAAM+C,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAYjD,EAAMA,MACtB,IAAMkD,EAAeJ,EAAIK,aAAeL,EAAIM,UAAUC,QAAU,GAEhEP,EAAIG,UAAYjD,EAAMD,OACtB,IAAMuD,EAAgBR,EAAIK,aAAeL,EAAIM,UAAUC,QAAU,GAEjE,OAAOd,EAAU,0EAAD,OAC4DW,EAD5D,eAC+EI,IAIjG,OAAOf,IAMJgB,S,QCnHD3B,EAAqB,CAAEd,WAAYe,EAAiBf,YAEpDgB,EAAYC,aANM,SAAC3B,GAAD,MAAsB,CAC5CJ,MAAOI,EAAMD,OAAOA,UAKqByB,GAYrC4B,EAAwBpE,IAAOqE,KAAV,sFAAGrE,CAAH,+HAcrBsE,EAAetE,IAAO0D,IAAV,6EAAG1D,CAAH,qEAOZuE,EAAevE,IAAO0D,IAAV,6EAAG1D,CAAH,2DAgCH0C,KAxBuB,SAAC,GAAkC,IAAhC9B,EAA+B,EAA/BA,MAAOc,EAAwB,EAAxBA,WAE9C8C,qBAAU,WACR9C,MACC,CAACA,IAiBJ,OAAO,cAAC0C,EAAD,UAbAxD,EAAMA,OAAUA,EAAMD,OAKzB,qCAEE,cAAC2D,EAAD,CAAcG,wBAAyB,CAAEC,OAAQ9D,EAAMA,SACvD,cAAC2D,EAAD,CAAcE,wBAAyB,CAAEC,OAAQ9D,EAAMD,aAPlD,cAAC,IAAD,CAAiB2C,KAAMqB,IAAenB,KAAK,KAAKoB,MAAI,SClDlDC,EAVgB,WAC7B,OACE,qCACE,cAACC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCMA3E,EAAsB,CAC1B4E,QAAS,UACT3E,UAAW,UACX4C,OAAQ,UACR3C,YAAa,UACb2E,WAAY,cAGRC,EAAcC,YAAH,uTAEE,SAAChF,GAAD,OAAWA,EAAMC,MAAM6E,cAClB,SAAC9E,GAAD,OAAWA,EAAMC,MAAM4E,WAqBhCI,EATO,WACpB,OACE,eAAC,IAAD,CAAehF,MAAOA,EAAtB,UACE,cAAC8E,EAAD,IACA,cAAC,EAAD,Q,gBCvCAG,EAActE,0BAAgBuE,GAE9BC,EAAmBC,8BAAoB,IAM9BC,EAJQ,WACrB,OAAOC,sBAAYL,EAAaE,EAAiBI,0BAAgBC,QCD7DC,G,MAAaJ,KAEnBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,MAAOJ,EAAtB,SACE,cAAC,EAAD,QAGJjC,SAASsC,eAAe,W","file":"static/js/main.6b97ccf8.chunk.js","sourcesContent":["/* --------------------------- quotes state shape --------------------------- */\n\nexport type QuotesState = {\n  author: string;\n  quote: string;\n};\n\n/* ------------------------- quotes constant strings ------------------------ */\n\nexport enum QuotesActions {\n  FETCH_QUOTE = 'quotes/FETCH_QUOTE',\n  CLEAR_QUOTE = 'quotes/CLEAR_QUOTE',\n}\n\n/* --------------------------- quotes action types -------------------------- */\n\ninterface FetchQuoteAction {\n  type: typeof QuotesActions.FETCH_QUOTE;\n  payload: QuotesState;\n}\n\ninterface ClearQuoteAction {\n  type: typeof QuotesActions.CLEAR_QUOTE;\n}\n\nexport type QuotesActionTypes = FetchQuoteAction | ClearQuoteAction;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\n/* --------------------------------- Styles --------------------------------- */\n\nconst StyledFooter = styled.footer`\n  text-align: center;\n  color: ${(props) => props.theme.secondary};\n  flex: none;\n  padding-bottom: 3px;\n\n  & a {\n    text-decoration-line: none;\n    color: ${(props) => props.theme.twitterBlue};\n  }\n`;\n\n/* -------------------------------- Component ------------------------------- */\n\nconst Footer: React.FC = () => (\n  <StyledFooter>\n    Created and Designed by&nbsp;\n    <a href=\"https://github.com/Squibs\" target=\"_blank\" rel=\"noreferrer\">\n      Zachary Holman\n    </a>\n  </StyledFooter>\n);\n\nexport default Footer;\n","import { combineReducers } from 'redux';\nimport { QuotesState, QuotesActionTypes, QuotesActions } from './types';\n\nconst initialState: QuotesState = {\n  author: '',\n  quote: '',\n};\n\nconst quotesReducer = (state = initialState, action: QuotesActionTypes) => {\n  switch (action.type) {\n    case QuotesActions.FETCH_QUOTE:\n      return { ...state, author: action.payload.author, quote: action.payload.quote };\n    case QuotesActions.CLEAR_QUOTE:\n      return { ...state, author: '', quote: '' };\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  quotes: quotesReducer,\n});\n\nexport default reducer;\n","import axios from 'axios';\n\nconst axiosApiRequest = axios.create({\n  baseURL: 'https://quotesondesign.com/wp-json/wp/v2',\n});\n\nexport default axiosApiRequest;\n\n// https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand&per_page=1\n","import type { AppThunk } from '../../store';\nimport { axiosApiRequest } from '../../utils';\nimport * as actions from './actions';\n\n/* -------------------------- quotes thunk actions -------------------------- */\n\nconst fetchQuote = (): AppThunk => async (dispatch) => {\n  const response = await axiosApiRequest.get(\n    `/posts/?orderby=rand&per_page=1&timestamp=${new Date().getTime()}`,\n  );\n\n  const formattedData = {\n    author: response.data[0].title.rendered,\n    quote: response.data[0].content.rendered,\n  };\n\n  dispatch(actions.fetchQuote(formattedData));\n};\n\n/* -------------------------- quotes simple actions ------------------------- */\n\nconst { clearQuote } = actions;\n\nexport { clearQuote, fetchQuote };\n","import { QuotesActions, QuotesActionTypes, QuotesState } from './types';\n\nconst fetchQuote = (quoteInformation: QuotesState): QuotesActionTypes => ({\n  type: QuotesActions.FETCH_QUOTE,\n  payload: quoteInformation,\n});\n\nconst clearQuote = (): QuotesActionTypes => ({\n  type: QuotesActions.CLEAR_QUOTE,\n});\n\nexport { fetchQuote, clearQuote };\n","import reducer from './reducers';\n\nimport * as quotesOperations from './operations';\n\nexport { quotesOperations };\n\nexport default reducer;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components/macro';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { quotesOperations } from '../../state/ducks/quotes';\nimport { AppState } from '../../state/store';\n\n/* ------------------------------ Redux Config ------------------------------ */\n\nconst mapStateToProps = (state: AppState) => ({\n  quote: state.quotes.quotes,\n});\n\nconst mapDispatchToProps = {\n  fetchQuote: quotesOperations.fetchQuote,\n  clearQuote: quotesOperations.clearQuote,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n/* ---------------------------------- Types --------------------------------- */\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\n/* --------------------------------- Styles --------------------------------- */\n\nconst QuoteControlContainer = styled.header`\n  display: flex;\n  justify-content: center;\n  height: 60px;\n  background-color: ${(props) => props.theme.secondary};\n  flex: none;\n`;\n\nconst GetQuoteButton = styled.button`\n  width: 25%;\n  min-width: 100px;\n  height: 46px;\n  margin: 7px;\n  background-color: ${(props) => props.theme.secondary};\n  border: 5px solid ${(props) => props.theme.accent};\n  border-radius: 5px;\n  color: ${(props) => props.theme.accent};\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 20px;\n`;\n\nconst TwitterLink = styled.a`\n  position: absolute;\n  top: 5px;\n  right: 2.5%;\n  color: ${(props) => props.theme.twitterBlue};\n  border-color: ${(props) => props.theme.secondary};\n  cursor: pointer;\n\n  // outline fontawesome icon/svg\n  & .fa-twitter {\n    stroke: ${(props) => props.theme.accent};\n    stroke-width: 15;\n  }\n\n  @media screen and (max-width: 300px) {\n    position: relative;\n    right: 0%;\n    padding-left: 5px;\n  }\n`;\n\n/* -------------------------------- Component ------------------------------- */\n\nconst QuotesControls: React.FC<Props> = ({ fetchQuote, clearQuote, quote }: Props) => {\n  const handleGetQuote = () => {\n    clearQuote(); // to show spinner when getting new quote\n    fetchQuote();\n  };\n\n  const generateTweetURL = () => {\n    const tweetLink = (url?: string) => {\n      type NoURL = {\n        onClick: () => void;\n      };\n\n      type WithURL = {\n        target: string;\n        href: typeof url;\n        rel: string;\n      };\n\n      const generateButton = (props: NoURL | WithURL) => (\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        <TwitterLink {...props}>\n          <FontAwesomeIcon icon={faTwitter} size=\"3x\" />\n        </TwitterLink>\n      );\n\n      // if no url; have an alert instead of navigation event\n      if (!url) {\n        // eslint-disable-next-line no-alert\n        return generateButton({ onClick: () => alert('No quote is available.') });\n      }\n\n      // if there is a url insert it into anchor\n      return generateButton({ target: '_blank', href: url, rel: 'noreferrer' });\n    };\n\n    if (quote.quote !== '' && quote.author !== '') {\n      const div = document.createElement('div');\n      div.innerHTML = quote.quote;\n      const cleanedQuote = div.textContent || div.innerText.trim() || '';\n\n      div.innerHTML = quote.author;\n      const cleanedAuthor = div.textContent || div.innerText.trim() || '';\n\n      return tweetLink(\n        `https://twitter.com/intent/tweet?related=freeCodeCamp,SquibsVids&text=\"${cleanedQuote}\" - ${cleanedAuthor}`,\n      );\n    }\n\n    return tweetLink();\n  };\n\n  return (\n    <QuoteControlContainer>\n      <GetQuoteButton onClick={handleGetQuote}>Quote</GetQuoteButton>\n      {generateTweetURL()}\n    </QuoteControlContainer>\n  );\n};\n\nexport default connector(QuotesControls);\n","import { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport styled from 'styled-components/macro';\nimport { quotesOperations } from '../../state/ducks/quotes';\nimport { AppState } from '../../state/store';\n\n/* ------------------------------ Redux Config ------------------------------ */\n\nconst mapStateToProps = (state: AppState) => ({\n  quote: state.quotes.quotes,\n});\n\nconst mapDispatchToProps = { fetchQuote: quotesOperations.fetchQuote };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n/* ---------------------------------- Types --------------------------------- */\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\n/* --------------------------------- Styles --------------------------------- */\n\n// not sure if I should put in classNames and just put styles on parent\n// or make them all styled elements like I am currently\nconst QuoteDisplayContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 900px;\n  margin: 0 auto;\n  flex: 1 0 auto;\n\n  // spinner; could inline it, but ehh\n  & svg {\n    margin-top: 10px;\n  }\n`;\n\nconst QuoteTextDiv = styled.div`\n  text-align: center;\n  font-size: 1.75em;\n  margin: 10px;\n  margin-top: 10px;\n`;\n\nconst QuoteAuthorI = styled.div`\n  font-size: 1.25em;\n  font-style: italic;\n  text-align: center;\n`;\n\n/* -------------------------------- Component ------------------------------- */\n\nconst QuoteDisplay: React.FC<Props> = ({ quote, fetchQuote }: Props) => {\n  // get quote on page load / component mount\n  useEffect(() => {\n    fetchQuote();\n  }, [fetchQuote]);\n\n  // show spinner if no quote\n  const renderQuote = () => {\n    if (!quote.quote || !quote.author) {\n      return <FontAwesomeIcon icon={faCircleNotch} size=\"6x\" spin />;\n    }\n\n    return (\n      <>\n        {/* eslint-disable-next-line react/no-danger */}\n        <QuoteTextDiv dangerouslySetInnerHTML={{ __html: quote.quote }} />\n        <QuoteAuthorI dangerouslySetInnerHTML={{ __html: quote.author }} />\n      </>\n    );\n  };\n\n  return <QuoteDisplayContainer>{renderQuote()}</QuoteDisplayContainer>;\n};\n\nexport default connector(QuoteDisplay);\n","import React from 'react';\nimport { Footer } from '../components';\nimport { QuoteControls, QuoteDisplay } from '../containers';\n\n/* -------------------------------- Component ------------------------------- */\n\nconst QuoteMachine: React.FC = () => {\n  return (\n    <>\n      <QuoteControls />\n      <QuoteDisplay />\n      <Footer />\n    </>\n  );\n};\n\nexport default QuoteMachine;\n","import React from 'react';\nimport { createGlobalStyle, DefaultTheme, ThemeProvider } from 'styled-components';\nimport { QuoteMachine } from './pages';\n\n// typescript module for styled-components theme so autocomplete works\n// should probably go in own folder, but this works for now.\n// https://styled-components.com/docs/api#typescript\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    primary: string;\n    secondary: string;\n    accent: string;\n    twitterBlue: string;\n    fontFamily: string;\n  }\n}\n\nconst theme: DefaultTheme = {\n  primary: '#dddddd',\n  secondary: '#313131',\n  accent: '#ffffff',\n  twitterBlue: '#1da1f3',\n  fontFamily: 'RT Raleway',\n};\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: ${(props) => props.theme.fontFamily};\n    background-color: ${(props) => props.theme.primary};\n    min-width: 180px;\n  }\n\n  // sticky footer https://css-tricks.com/couple-takes-sticky-footer/#there-is-flexbox\n  html, body, #root { height: 100%; }\n  #root {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <QuoteMachine />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { Action, applyMiddleware, combineReducers, createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk, { ThunkAction } from 'redux-thunk';\nimport * as reducers from './ducks';\n\nconst rootReducer = combineReducers(reducers);\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst configureStore = (): Store => {\n  return createStore(rootReducer, composeEnhancers(applyMiddleware(reduxThunk)));\n};\n\nexport default configureStore;\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppState,\n  unknown,\n  Action<string>\n>;\n","// this is for use of the css prop https://styled-components.com/docs/api#css-prop\nimport type {} from 'styled-components/cssprop'; // import as type\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport App from './app/views/App';\nimport configureStore from './app/state/store';\nimport 'normalize.css';\n\nconst reduxStore = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={reduxStore}>\n      <App />\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}